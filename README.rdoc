= Blueprints

Another replacement for factories and fixtures that focuses on being DRY and making developers type as little as possible.

== Usage

Blueprints look like this:

  blueprint :apple do
    Fruit.blueprint :species => 'apple'
  end

  blueprint :orange do
    Fruit.create! :species => 'orange'
  end

  blueprint :fruitbowl => [:apple, :orange] do
    FruitBowl.blueprint :fruit => [@apple,@orange]
  end

  blueprint :kitchen => :fruitbowl do
    Kitchen.blueprint :fruitbowl => @fruitbowl
  end

...and you use them in specs like:

  describe Fruit, "apple" do
    before do
      build :apple
    end

    it "should be an apple" do
      @apple.species.should == 'apple'
    end
  end

  describe FruitBowl, "with and apple and an orange" do
    before do
      build :fruitbowl
    end

    it "should have 2 fruits" do
      @fruitbowl.should have(2).fruit
    end
  end

Result of 'blueprint' block is assigned to an instance variable with the same name. You can also assign your own instance variables
inside 'blueprint' block and they will be accessible in tests that build this blueprint.

Instead of SomeModel.create! you can also use SomeModel.blueprint, which does the same thing but also bypasses attr_protected
and attr_accessible restrictions (which is what you usually want in tests).

All blueprints are run only once, no matter how many times they were called, meaning that you don't need to worry about
duplicating data.

=== Shorthands

There's a shorthand for these type of scenarios:

  blueprint :something do
    @something = SomeModel.blueprint :field => 'value'
  end

You can just type:

  SomeModel.blueprint :something, :field => 'value'

If you need to make associations then:

  SomeModel.blueprint :something, :associated_column => :@association_instance_variable

And if you also need it to depend on other blueprints:

  SomeModel.blueprint({:something => :some_blueprint}, :associated_column => :@some_iv)

...or...

  SomeModel.blueprint(:something, :associated_column => :@some_iv).depends_on(:some_blueprint)

...or if name of associated blueprint and instance variable are same...

  SomeModel.blueprint(:something, :associated_column => d(:some_blueprint)) # I prefer this one

=== Blueprints file

Blueprints searches for blueprints files in this particular order in Rails (Merb) root:
* blueprint.rb
* blueprint/*.rb
* spec/blueprint.rb
* spec/blueprint/*.rb
* test/blueprint.rb
* test/blueprint/*.rb
You can set root option to override framework root and filename option to pass custom filename pattern

== Setup

The easiest way to install this gem for Ruby on Rails is just add this line to config/environment.rb (or config/environments/test.rb):

  config.gem 'blueprints'

If youâ€™re not using rails, then you can install it through command line

  sudo gem install blueprints

Lastly you could use it as plugin:

  ruby script/plugin install git://github.com/sinsiliux/blueprints.git

Blueprints is activated by calling Blueprints.enable in your spec_helper/test_helper. This method accepts block and yields Blueprints::Configuration object.
These options can be set on blueprint configuration object:
* root - custom framework root if automatic detection fails for some reason (eg. not rails/merb project)
* filename - custom files pattern with blueprints
* prebuild - list of blueprints that should be preloaded (available in all tests, never reloaded so they're much faster)
* orm - allows to set ORM (currently can be :active_record or nil). Defaults to :active_record.
* transactions - set this to false if you don't want to use transactions. This will severely slow the tests but sometimes transactions can't be used.

Sample usage:

  Blueprints.enable do |config|
    config.filename = 'my_blueprints.rb'
    config.prebuild = :preloaded_blueprint
  end

== Advanced Usage

Its just ruby, right? So go nuts:

  1.upto(9) do |i|
    blueprint("user_#{i}") do
      User.blueprint :name => "user#{i}"
    end
  end

== Transactions

Blueprints by default is transactional, meaning that before every test transaction is started and after every test that transaction is dropped
which resets database to the state before the test. This state is empty database + any scenarios that you specify in enable_blueprints.

== TODO

* Add ability to revert one blueprint.
* Add preloading blueprints for whole block of tests.
* Fix rake tasks
* Add merb support
* Add support for other test frameworks (check support of cucumber)

== Credits

Andrius Chamentauskas <sinsiliux@gmail.com>

The code is based on hornsby scenario plugin by Lachie Cox, which is based on Err's code found in this post: http://errtheblog.com/post/7708

== License

MIT, see LICENCE
